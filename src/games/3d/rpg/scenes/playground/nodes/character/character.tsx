/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/character.glb -o src/components/Character.jsx -r public
*/

import { useAnimations, useGLTF } from '@react-three/drei';
import characterModel from 'libs/assets/models/character.glb';
import { useEffect, useRef } from 'react';
import { Group } from 'three';

useGLTF.preload(characterModel);

export function Character({ animation, scale, ...props }: any) {
  const group = useRef<Group>();

  const { nodes, materials, animations } = useGLTF(characterModel);
  const { actions } = useAnimations(animations, group);

  //@ts-expect-error Fix
  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.24).play();
    return () => actions?.[animation]?.fadeOut(0.24);
  }, [animation]);

  return (
    <group ref={group} scale={scale} {...props} dispose={null}>
      <group name="Scene">
        <group name="fall_guys">
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            name="body"
            //@ts-expect-error Fix
            geometry={nodes.body.geometry}
            material={materials.Material}
            //@ts-expect-error Fix
            skeleton={nodes.body.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="eye"
            //@ts-expect-error Fix
            geometry={nodes.eye.geometry}
            material={materials.Material}
            //@ts-expect-error Fix
            skeleton={nodes.eye.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="hand-"
            //@ts-expect-error Fix
            geometry={nodes['hand-'].geometry}
            material={materials.Material}
            //@ts-expect-error Fix
            skeleton={nodes['hand-'].skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="leg"
            //@ts-expect-error Fix
            geometry={nodes.leg.geometry}
            material={materials.Material}
            //@ts-expect-error Fix
            skeleton={nodes.leg.skeleton}
            castShadow
            receiveShadow
          />
        </group>
      </group>
    </group>
  );
}
